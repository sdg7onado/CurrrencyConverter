/*
 * *
 *  * Created by Okechukwu Agufuobi on 13/12/2021, 2:43 PM
 *  * Copyright (c) 2021 . All rights reserved.
 *  * Last modified 13/12/2021, 2:37 PM
 *
 */

//apply plugin: 'kotlin-kapt'

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    compileSdk 31

    signingConfigs {
        ConverterKeyStore {

            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']

        }
    }

    defaultConfig {
        applicationId "com.paypay.converter"
        minSdk 26
        targetSdk 34
        versionCode 100
        versionName "1.0.0"

        //
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // should correspond to key/value pairs inside the file
        buildConfigField("String", "CURRENCYLAYER_BASE_URL", apikeyProperties['CURRENCYLAYER_BASE_URL'])
        buildConfigField("String", "CURRENCYLAYER_API_KEY", apikeyProperties['CURRENCYLAYER_API_KEY'])

        //for the varios endpoints provided by currency layer
        buildConfigField("String", "CURRENCYLAYER_LIST_ENDPOINT", apikeyProperties['CURRENCYLAYER_LIST_ENDPOINT'])
        buildConfigField("String", "CURRENCYLAYER_RATES_ENDPOINT", apikeyProperties['CURRENCYLAYER_RATES_ENDPOINT'])
        buildConfigField("String", "CURRENCYLAYER_CONVERT_ENDPOINT", apikeyProperties['CURRENCYLAYER_CONVERT_ENDPOINT'])

        buildConfigField("String", "DEFAULT_CURRENCY", apikeyProperties['DEFAULT_CURRENCY'])
        //buildConfigField("Long", "REFRESH_INTERVAL", apikeyProperties['REFRESH_INTERVAL'])

    }

    buildTypes {
        release {
            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            debuggable = false

            signingConfig signingConfigs.ConverterKeyStore
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    def appName = "CurrencyConverter"
                    outputFileName = appName + "-Release-${variant.versionName}.apk"
                }
            }
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    dependenciesInfo {
        includeInApk true
        includeInBundle true
    }

    useLibrary("android.test.runner")
    useLibrary("android.test.base")
    useLibrary("android.test.mock")

    compileSdkVersion 34
    buildToolsVersion '31.0.0'
    ndkVersion '23.1.7779620'
    namespace 'com.paypay.converter'
    lint {
        abortOnError false
        checkReleaseBuilds false
    }
}

dependencies {

    //  Core APIs
    implementation "androidx.core:core-ktx:1.12.0"
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
    implementation "androidx.activity:activity-ktx:$rootProject.activityVersion"

    //  Androidx / Material Design APIs
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$rootProject.swipeRefreshLayoutVersion"

    //  SPlashScreen API
    implementation "androidx.core:core-splashscreen:$rootProject.splashScreenVersion"

    //  Lifecycle components
    implementation "android.arch.lifecycle:extensions:$rootProject.lifecycleExtensionsVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"

    //  Firebase
    //  Import the BoM for the Firebase platform
    implementation platform("com.google.firebase:firebase-bom:$rootProject.firebaseBOMVersion")
    implementation "com.google.android.gms:play-services-measurement-api:$rootProject.playServicesMeasurmentVersion"
    implementation "com.google.firebase:firebase-crashlytics-ktx"
    implementation "com.google.firebase:firebase-analytics-ktx"

    //  Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:coroutinesVersion")

    //  Room components
    //  implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    implementation 'androidx.test:core-ktx:1.5.0'
    implementation 'androidx.test.ext:junit-ktx:1.1.5'
    //  annotationProcessor "androidx.room:room-compiler:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"

    implementation "androidx.room:room-rxjava2:$rootProject.roomVersion"

    //
    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentKtxVersion"

    //  WorkManager components
    implementation "androidx.work:work-runtime:$rootProject.workVersion"
    implementation "androidx.work:work-runtime-ktx:$rootProject.roomKtxVersion"

    //RxJava2 support
    implementation "androidx.work:work-rxjava2:$rootProject.workVersion"

    //GSON
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"

    //JACKSON
    implementation ("com.fasterxml.jackson.module:jackson-module-kotlin:$rootProject.jacksonModuleKotlinVersion") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-reflect'
    }

    //  Multidex
    implementation "androidx.multidex:multidex:$rootProject.multiDexVersion"

    implementation "io.grpc:grpc-okhttp:$rootProject.okhttpVersion"

    //  Volley
    implementation "com.android.volley:volley:$rootProject.volleyVersion"

    //
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.converterGsonVersion"


    // Testing
    testImplementation "junit:junit:$rootProject.junitVersion"

    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"

    testImplementation "androidx.work:work-testing:$rootProject.workVersion"

    testImplementation ('androidx.test:core:1.5.0')

    //ndroidTestImplementation "android.arch.core:core-testing:1.1.1"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation('androidx.test:runner:1.5.2')
    androidTestImplementation('androidx.test:rules:1.5.2')

    // Assertions
    androidTestImplementation('androidx.test.ext:junit:1.1.5')
    testImplementation('androidx.test.ext:truth:1.5.0')
    testImplementation('com.google.truth:truth:1.0.1')

    // Espresso dependencies
    //androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0')
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.5.1')
    androidTestImplementation('androidx.test.espresso:espresso-intents:3.5.1')
    androidTestImplementation('androidx.test.espresso:espresso-accessibility:3.5.1')
    androidTestImplementation('androidx.test.espresso:espresso-web:3.5.1')
    androidTestImplementation('androidx.test.espresso.idling:idling-concurrent:3.5.1')

    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    androidTestImplementation("androidx.test.espresso:espresso-core:$rootProject.espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}